//
// Created by Qirun Zeng on 15/1/2025.
//

#ifndef ENVIRONMENT_H
#define ENVIRONMENT_H

#include <vector>
#include <cmath>

namespace env {
    inline unsigned seed;

    static inline int best_arm = 0;

    inline std::vector expectations = {0.72, 0.70, 0.67, 0.66, 0.65, 0.64, 0.62, 0.61, 0.59, 0.57, 0.56, 0.55, 0.54, 0.53, 0.51, 0.49};
    inline std::vector<std::vector<double>> preference_matrix = {
        {0.50, 0.52, 0.53, 0.55, 0.57, 0.59, 0.61, 0.63, 0.65, 0.66, 0.69, 0.71, 0.73, 0.75, 0.76, 0.78},
        {0.48, 0.50, 0.52, 0.53, 0.55, 0.58, 0.60, 0.62, 0.64, 0.65, 0.67, 0.68, 0.71, 0.72, 0.74, 0.75},
        {0.47, 0.48, 0.50, 0.52, 0.54, 0.55, 0.54, 0.56, 0.57, 0.59, 0.61, 0.62, 0.64, 0.67, 0.70, 0.72},
        {0.45, 0.47, 0.48, 0.50, 0.51, 0.52, 0.54, 0.55, 0.56, 0.58, 0.60, 0.62, 0.64, 0.66, 0.69, 0.69},
        {0.43, 0.45, 0.46, 0.49, 0.50, 0.52, 0.53, 0.54, 0.55, 0.57, 0.58, 0.61, 0.63, 0.64, 0.66, 0.68},
        {0.41, 0.42, 0.45, 0.48, 0.48, 0.50, 0.51, 0.52, 0.53, 0.55, 0.57, 0.59, 0.61, 0.62, 0.63, 0.65},
        {0.39, 0.40, 0.46, 0.46, 0.47, 0.49, 0.50, 0.52, 0.53, 0.54, 0.55, 0.57, 0.58, 0.59, 0.60, 0.63},
        {0.37, 0.38, 0.44, 0.45, 0.46, 0.48, 0.48, 0.50, 0.51, 0.53, 0.54, 0.55, 0.55, 0.57, 0.59, 0.62},
        {0.35, 0.36, 0.43, 0.44, 0.45, 0.47, 0.47, 0.49, 0.50, 0.52, 0.54, 0.54, 0.56, 0.57, 0.58, 0.60},
        {0.34, 0.35, 0.41, 0.42, 0.43, 0.45, 0.46, 0.47, 0.48, 0.50, 0.51, 0.52, 0.53, 0.55, 0.56, 0.58},
        {0.31, 0.33, 0.39, 0.40, 0.42, 0.43, 0.45, 0.46, 0.46, 0.49, 0.50, 0.52, 0.52, 0.52, 0.54, 0.57},
        {0.29, 0.32, 0.38, 0.38, 0.39, 0.41, 0.43, 0.45, 0.46, 0.48, 0.48, 0.50, 0.52, 0.52, 0.55, 0.56},
        {0.27, 0.29, 0.36, 0.36, 0.37, 0.39, 0.42, 0.45, 0.44, 0.47, 0.48, 0.48, 0.50, 0.52, 0.52, 0.54},
        {0.25, 0.28, 0.33, 0.34, 0.36, 0.38, 0.41, 0.43, 0.43, 0.45, 0.48, 0.48, 0.48, 0.50, 0.52, 0.53},
        {0.24, 0.26, 0.30, 0.31, 0.34, 0.37, 0.40, 0.41, 0.42, 0.44, 0.46, 0.45, 0.48, 0.48, 0.50, 0.52},
        {0.22, 0.25, 0.28, 0.31, 0.32, 0.35, 0.37, 0.38, 0.40, 0.42, 0.43, 0.44, 0.46, 0.47, 0.48, 0.50}
    };

    namespace fdb { // feedback
        int Duel(int arm1, int arm2);

        int PullArm(int arm);
    }
}

inline int env::fdb::Duel(const int arm1, const int arm2) {
    return rand() % RAND_MAX <= preference_matrix[arm1][arm2] * RAND_MAX ? arm1 : arm2; // with prob exp_m[a1][a2] return arm1, else arm2
}

inline int env::fdb::PullArm(const int arm) {
    return static_cast<double>(rand() % RAND_MAX) / RAND_MAX <= expectations[arm];
}

#endif //ENVIRONMENT_H
